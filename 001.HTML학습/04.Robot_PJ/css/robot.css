@charset "utf-8";
/* 로봇 PJ CSS - robot.css */

/* 웹폰트 CDN */
@import url("https://fonts.googleapis.com/css2?family=Black+Ops+One&family=Orbitron:wght@500&display=swap");

/* 
    font-family: 'Black Ops One', cursive;
    font-family: 'Orbitron', sans-serif;
*/
html {
    scroll-behavior: smooth;
    /* 내부 아이디 요소 위치로 이동시
    스크롤 애니메이션을 부드럽게 처리하는 속성!
    최상위 요소인 html에 셋팅하면 전체페이지 
    스크롤에 적용됨! */
}

html,
body {
    margin: 0;
    padding: 0;
}

body {
    /* 배경: 색이반고윙/크 */
    background: url(../images/bg.jpg) no-repeat fixed top/cover;

    /* 패딩탑은 .robx로 옮긴다! */
    /* padding-top: 100px; */

    /* 가로스크롤바 숨기기 -> .robx 에서처리!*/
    /* overflow-x: hidden; */

    /* sticky포지션을 위한 주의사항!
    overflow-x숨기기 셋팅을 html과 동시에
    잡으면 sticky가 작동하지 않는다!
    body에만 설정할것! */
}

/* 공사중표시 */
/* body * {
    outline: 2px dashed lime;
} */

/* 
    [ 요소 정중앙 정렬법 ]
    : 포지션이 absolute 혹은 fixed일때 
    기준에 따른 정중앙 정렬법

    1. top과 left를 50%로 밀고 
        자기크기의 절반만큼 빼기
    예) calc(50% - 특정px)
    - calc() 메서드는 css전용 계산 메서드
    > 사칙연산이 모두 가능함
    여기서는 유동적인 %에서 특정px을 뺄때 사용함
    > 주의: 마이너스 기호 앞뒤로 반드시 띄어쓰기!

    2. top과 left를 50%로 밀고 
        자기크기의 절반만큼 이동하기
        -> transform: translate(-50%,-50%) 사용!
        -> -50%는 자기자신의 가로/세로 크기의 절반만큼
        반대방향으로 이동함

    ((CSS전용 메서드))
    -> w3schools
    https://www.w3schools.com/css/css_math_functions.asp
*/

/* 로봇페이지 로고 */
h1#logo {
    position: fixed;

    /* 정중앙배치 방법1 */
    top: calc(50% - 102px);
    left: calc(50% - 102px);

    /* 102px을 뺀것은 보더크기고려 */
    /* fixed의 부모는 보이는 화면(window)! */

    /* 정중앙배치 방법2 */
    /* top: 50%;
    left: 50%;
    transform: translate(-50%, -50%); */

    /* 크기 2배확대 */
    transform: scale(2);

    width: 200px;
    height: 200px;
    border: 2px solid #ccc;
    border-radius: 50%;
    margin: 0;

    /* 글자가로중앙 */
    text-align: center;
    /* 글자세로중앙 - 높이값과 동일! */
    /* line-height: 200px; 
    -> 아래 font한번에 설정에서 함! */

    /* 글자색 */
    color: #00ffae;
    /* 글자설정 한번에!
    font: 스타일 두께 크기/줄간격 글자체
    font: 스두크/줄체 */
    font: 45px/200px "Orbitron";
    /* 글자그림자: x y 블러 색 */
    text-shadow: 2px 2px 5px #000;
    /* 박스그림자: (내부) x y 블러 (크기) 색 */
    box-shadow: 0 0 20px 5px pink, inset 0 0 20px 5px #000;

    /* 배경 */
    background: pink url(../images/robot_03.png) no-repeat;
    background-position: center 10px;
    background-size: 160px;

    /* 애니메이션: 이시이지반방마 */
    animation:
        /* 애니1:이동하기(2초후 2초간) */
        logoAni 2s ease-in-out 2s forwards,
        /* 애니2:흔들기(4초후 1초간 영원히 번갈아) */
        logoAni2 1s ease-in-out 4s infinite alternate;
}

/* 로고 애니 키프레임 */
@keyframes logoAni {
    /* 시작값 - 초기설정값과 같으면 생략! */
    /* from{
        top: calc(50% - 102px);
        left: calc(50% - 102px);
        transform: scale(2);
    } */

    /* rotate적용을 위한 전단계 */
    80% {
        top: 50px;
        left: 50px;
        transform: scale(1) rotate(0deg);
    }

    /* 끝값 */
    100% {
        top: 50px;
        left: 50px;
        transform: scale(1) rotate(20deg);
    }
}

/* 키프레임 */

/* 로고 흔들기 키프레임 */
@keyframes logoAni2 {
    0% {
        transform: rotate(20deg);
    }

    100% {
        transform: rotate(-20deg);
    }
}

/* 키프레임 */

/*************************************************** 
    [ CSS로 애니메이션 하기 ]

    -시간에 따라 CSS설정이 변경되어 애니메이션 하도록
    키프레임을 설정하고 이것을 호출함으로 의도된 연출을
    구현하는 것이 CSS 애니메이션이다!

    [ 애니메이션 키프레임 만들기 ]
    - 키프레임이란? 애니메이션 장면을 넣는 코드

    1. 두장면 키프레임

    @keyframes 키프레임이름{
        from{시작CSS설정}
        to{끝나는CSS설정}
    }

    또는

    @keyframes 키프레임이름{
        0%{시작CSS설정}
        100%{끝나는CSS설정}
    }

    -> 만약 from설정이 초기설정과 같다면 from생략가능!

    2. 여러장면 키프레임

    @keyframes 키프레임이름{
        0%{시작CSS설정}
        10%{시작CSS설정}
        20%{시작CSS설정}
        ...
        80%{시작CSS설정}
        90%{시작CSS설정}
        100%{끝나는CSS설정}
    }

    (1) 장면에 대한 시간계산은 어떻게 하나?
    -> 전체시간 * 설정된%/100

    (2) 전체 애니메이션 시간은 언제 셋팅하나?
    -> 호출시에 셋팅!

    [ 설정된 키프레임 호출하는 방법 ]

    animation: 二時二知半方馬
    animation: 이시이지반방마 
    (이름 시간 이징 지연 반복 방향 마지막상태)

    1. 이름(animation-name) : 키프레임 이름

    2. 시간(animation-duration) : 애니메이션 동작시간
        -> 초단위(s)

    3. 이징(animation-timing-function) : easing 가속도

    4. 지연(animation-delay) : 애니메이션 시작지연시간(s)
    
    5. 반복(animation-iteration-count) : 애니메이션 반복
        - 기본값 1, 숫자를 쓰면 숫자만큼 반복함
        - 영원히 infinite(인피니트)
    
    6. 방향(animation-direction) : 시작 -> 끝
        - 한번이상 반복할 경우 반대경로로 애니메이션을 설정
        -> alternate : 시작->끝, 끝->시작

    7. 마지막상태(animation-fill-mode) :
        - 애니메이션이 끝났을때 처음으로 돌아가는게 기본
        -> forwards (앞쪽에...즉, 애니끝장면으로 마무리!)
        -> 기본값 : backwards(처음으로)
        -> 유의사항 : infinite(영원히)일때는 해당사항없음!


***************************************************/

/* 내용보기 링크 타이틀 */
.link {
    position: absolute;
    top: 100px;
    right: 50px;
    /* 부모는? 보이는화면! */    
}

/* 투명요소 보이게 키프레임 호출 클래스 */
.opaAni{
    /* 처음에 안보임 - 투명 */
    opacity: 0;
    
    /* 애니메이션: 이시이지반방마 */
    animation: opaAni 1s forwards;
}
/* 딜레이셋팅 클래스 */
.opaAni.delay1{
    animation-delay: 5s;
}
.opaAni.delay2{
    animation-delay: 6s;
}
.opaAni.delay3{
    animation-delay: 7s;
}

/* 투명요소 보이게 애니 키프레임 */
@keyframes opaAni {
    10% {
        opacity: 1;
    }

    30% {
        opacity: .1;
    }

    60% {
        opacity: 1;
    }

    80% {
        opacity: .5;
    }

    100% {
        opacity: 1;
    }
}

/* 키프레임 */



/* 링크 a요소 */
.link a {
    /* a요소에서 글자색,밑줄 처리함! */
    color: lawngreen;
    text-decoration: none;

    /* 글자설정 한번에! */
    font: 50px "Black Ops One", cursive;
    /* 글자그림자 */
    text-shadow: 2px 2px 2px #000;
}

/* 마우스 오버시 */
.link a:hover {
    color: orangered;
    text-decoration: overline;
    /* overline 윗줄 */
}

/* 위로이동버튼 */
.btnTop {
    position: fixed;
    bottom: 50px;
    right: 50px;
    /* 보이는 화면에 고정! */
    width: 100px;
    height: 100px;
    text-align: center;
    font: 30px/100px "Black Ops One";
    color: blue;
    text-decoration: none;
    background-color: #ccc;
    border-radius: 50%;
    border: 5px outset #fff;
}

/* TOP버튼 오버시 */
.btnTop:hover {
    background-color: #ff0;
    color: red;
    border-style: inset;
}

/* 로봇박스 */
.robx{
    /* body에 했던 설정을 여기에함! */
    padding-top: 100px;
    overflow: hidden;
    /* 높이값 */
    height: 980px;
    /* 높이값을 지정한 이유!
    -> 자식요소 #head의 relative포지션에서
    top값을 %로 지정할 경우 부모박스의 크기가
    정해져 있어야 %가 적용된다! */
}

/* 로봇머리 */
#head {
    position: relative;
    /* 부모자격 */

    /* 처음에 위로 나가있음 */
    top: -50%;

    width: 250px;
    height: 250px;
    /* 마영오! 블록중앙 */
    margin: 0 auto;
    background: url(../images/metal01.jpg) no-repeat center/cover;
    border-radius: 50px 50px 0 0;
    box-shadow: 0 0 10px 5px cyan;
}

/* 로봇애니 호출 클래스 : 로봇머리,몸 제자리 */
.backAni {
    /* 애니메이션: 이시이지반방마 */
    animation: backAni 1s ease-out 3s forwards;
}
/* 머리는 애니 딜레이 더줌 */
/* .backAni.delay1 
-> .backAni에만 적용되는 .dalay1이라는 뜻 */
.backAni.delay1{
    animation-delay: 4s;
}

/* 로봇머리,로봇몸 제자리로 애니 키프레임 */
@keyframes backAni {
    to {
        top: 0;
        left: 0;
        /* top, left값이 0이란 relative에서
        원래 자기있던 위치를 말한다! */
    }
}

/* 키프레임 */

/* 눈공통 */
.eye {
    position: absolute;
    top: 50px;
    /* 나의부모는? #head */

    width: 50px;
    height: 50px;
    background-color: #fff;
    background-repeat: no-repeat;
    background-size: 100% 100%;
    /* 원 */
    border-radius: 50%;
    border: 5px double #555;
}

/* 눈1 */
#eye1 {
    left: 50px;
    background-image: url(../images/e1.jpg);
}

/* 눈2 */
#eye2 {
    right: 50px;
    background-image: url(../images/e2.jpg);
}

/* 코 */
#nose {
    position: absolute;
    top: 102px;
    left: 100px;
    /* 부모는? #head */

    width: 50px;
    height: 75px;
    background: url(../images/nose.jpg) no-repeat 0/110% 100%;
    border-radius: 30px;
}

/* 입 */
#mouth {
    position: absolute;
    bottom: 16px;
    left: 79px;
    /* 부모는? #head */
    width: 90px;
    height: 40px;
    background: url(../images/mouth.png) no-repeat 0/100% 100%;

    /* 애니메이션: 이시이지반방마 */
    animation: talkAni .07s linear 7s infinite alternate;
}

/* 말하기 애니 키프레임 */
@keyframes talkAni {
    to{
        transform: scaleY(.4);
    }
} /* 키프레임 */

/* 귀공통 */
.ear {
    position: absolute;
    top: 80px;
    /* 부모는? #head */
    width: 50px;
    height: 85px;
    background: url(../images/metal02.jpg) no-repeat 0/100% 100%;
    box-shadow: 0 0 10px 5px cyan;
}

/* 귀1 */
#ear1 {
    left: -50px;
    border-radius: 40px 0 0 40px;
}

/* 귀2 */
#ear2 {
    right: -50px;
    border-radius: 0 40px 40px 0;
}

/* 로봇몸 */
#body {
    position: relative;
    /* 부모자격! */

    /* 처음에 왼쪽으로 나가있음! */
    left: -100%;

    width: 250px;
    height: 300px;
    margin: 0 auto;
    /* 마영오! */
    margin-top: 50px;
    margin-bottom: 370px;
    background: url(../images/metal01.jpg) no-repeat center/cover;
    border-bottom: 10px solid #222;
    box-shadow: 0 0 10px 5px cyan;
}

/* 목 */
#neck {
    position: absolute;
    top: -50px;
    left: 95px;
    /* 부모는? #body */

    width: 60px;
    height: 50px;
    background: url(../images/metal02.jpg) no-repeat 0/100% 100%;
}

/* 팔공통 */
.arm {
    position: absolute;
    top: 30px;
    /* 부모는? #body */

    width: 50px;
    height: 240px;
    background: url(../images/metal02.jpg) repeat-y 0/100%;
    box-shadow: 0 0 10px 5px cyan;
}

/* 팔1 */
#arm1 {
    left: -65px;
}

/* 팔2 */
#arm2 {
    right: -65px;
    /* 트랜스폼 기준축 변경: 상단 */
    transform-origin: top;
    /* 애니메이션: 이시이지반방마 */
    animation: 
    /* 팔올리기 애니호출 */
    riseAni .6s ease-out 7s forwards,
    /* 팔흔들기 애니호출 */
    shakeAni .4s ease-in-out 7.6s infinite alternate;
}
/* 팔올리기 애니 키프레임 */
@keyframes riseAni {
    to{
        transform: rotate(-160deg);
    }
} /* 키프레임 */

/* 팔흔들기 애니 키프레임 */
@keyframes shakeAni {
    from{
        transform: rotate(-160deg);
    }
    to{
        transform: rotate(-140deg);
    }
} /* 키프레임 */

/* 가상요소로 집게손 만들기 */
.arm::before {
    content: "";
    display: block;
    position: absolute;
    bottom: -53px;
    left: -15px;
    /* 부모는? .arm */
    width: 80px;
    height: 80px;
    border: 2px solid #555;
    border-radius: 50%;
    /* 원 */
    background-color: #ccc;
    /* 크기유지: 보더박스(보더,패딩포함) */
    box-sizing: border-box;
    box-shadow: 0 0 10px 5px cyan;
}

/* 가상요소로 집게손틈 만들기 */
.arm::after {
    content: "";
    display: block;
    position: absolute;
    bottom: -53px;
    left: 15px;
    /* 부모는? .arm */
    width: 20px;
    height: 51px;
    background-color: #000;
    border-radius: 10px;
}

/* 다리공통 */
.leg {
    position: absolute;
    top: 310px;
    /* 부모는? #body */

    width: 70px;
    height: 300px;
    background: url(../images/metal02.jpg) repeat-y 0/100%;
    box-shadow: 0 0 10px 5px cyan;
}

/* 다리1 */
#leg1 {
    left: 0;
}

/* 다리2 */
#leg2 {
    right: 0;
}

/* 가상요소로 로봇발 만들기 */
.leg::before {
    content: "";
    display: block;
    position: absolute;
    bottom: -42px;
    left: -9px;
    /* 부모는? .leg */
    width: 90px;
    height: 64px;
    border: 2px solid #555;
    border-bottom: 18px solid #555;
    border-radius: 40px 40px 0 0;
    background-color: #ccc;
    /* 크기유지: 보더박스(보더,패딩포함) */
    box-sizing: border-box;
    box-shadow: 0 0 10px 5px cyan;
}

/* 어깨공통 */
.sh {
    position: absolute;
    top: -20px;
    /* 부모는? #body */
    width: 80px;
    height: 80px;
    background: url(../images/metal01.jpg) no-repeat center/cover;
    box-shadow: 0 0 10px 5px cyan;
}

/* 어깨1 */
#sh1 {
    left: -80px;
    border-radius: 50% 5px 5px 50%;
}

/* 어깨2 */
#sh2 {
    right: -80px;
    border-radius: 5px 50% 50% 5px;
}

/* TV */
#tv {
    position: absolute;
    top: 65px;
    left: 26px;
    /* 부모는? #body */

    width: 200px;
    height: 150px;
    background: url(../images/tv.jpg) no-repeat 0/100% 100%;
    border-radius: 10px;
}

/* 스크린 */
#screen {
    position: absolute;
    top: 16px;
    left: 11px;
    /* 부모는? #tv */
    width: 142px;
    height: 107px;
    background-color: #000;
    border-radius: 11px;
    /* 넘치는 자식요소 숨기기 */
    overflow: hidden;
}

/* 유튜브 아이프레임 */
#screen iframe {
    position: absolute;
    top: 0;
    left: -21px;
    /* 부모는? #screen */
    width: 131%;
    height: 100%;

    /* 아이프레임 기본보더 없앰 */
    border: none;
}

/* 로봇 설명박스 */
#dcbx {
    width: 800px;
    /* 마영오! - 가로중앙 */
    margin: 0 auto;
    /* 하단공간 */
    margin-bottom: 200px;
    border: 3px solid #fff;
    border-radius: 20px;
    padding: 15px 30px;
    background-color: rgba(0, 0, 0, 0.5);
    color: #fff;
    /* 글자그림자: x y 블러 색 */
    text-shadow: 1px 1px 1px #000;
    /* 박스그림자: (내부) x y 블러 (크기) 색
    -> 박스그림자를 이용한 글로우효과주기!
    그림자색을 밝은 형광계열색을 준다!
    내부옵션 inset을 주면 안쪽그림자(글로우)효과 
    -> 콤마로 그림자를 여러개 줄 수 있음*/
    box-shadow: inset 0 0 20px blue, inset 0 0 50px 10px cyan;
}

/* 로봇설명 제목 */
#dcbx h2 {
    position: sticky;
    top: 0;
    /* sticky 포지션에서 top값을 주면
    보이는 화면의 위치를 체크하여
    그 위치에 올때 fixed처럼 화면에 
    고정해 준다! */
    font-size: 35px;
    text-align: center;
    color: lime;
    background-color: rgba(255, 255, 255, 0.4);
    border-radius: 20px;
}

/* 로봇 출처 */
#dcbx small {
    display: block;
    text-align: center;
    color: #ff0;
    font-size: 12px;
    /* 최소글자크기 한계는 10px */
}

/* 설명문단 */
#dcbx p {
    /* 기본글자크기는 일반적으로 16px */
    font-size: 15px;
    /* 줄간격: 배수/단위 등 */
    line-height: 1.8;
    /* 자간 */
    letter-spacing: 1px;
    /* 단어간격 */
    word-spacing: 2px;

    /*  가독성을 위한 다단설정 */
    /* 다단표시(다중열속성) */

    /* 다중열개수 */
    column-count: 3;
    /* 다중열구분선
    -> 보더설정값과 같음(두께 종류 색상) */
    column-rule: 5px dotted lightgreen;
    /* 다중열사이간격
    -> 구분선 오른쪽 간격조정 */
    column-gap: 55px;

    /* 문단정렬: 양쪽정렬 */
    text-align: justify;
    /* 단어깨기 */
    word-break: break-all;
    /* 1byte문자인 영어는 기본적으로
    단어단위로 같이 구분되어 있으므로
    문단에서 단어가 못들어가면 아랫줄로
    내려가서 중간이나 끝에 비어보임!
    이때 단어깨기설정을 해야 단어가
    글자단위로 모두 정렬될 수 있다! */

    /* 첫줄 들여쓰기 */
    text-indent: 20px;
}

/* 가상요소로 첫글자 디자인변경 */
#dcbx p::first-letter {
    font-size: 30px;
    font-weight: bold;
    color: lightsalmon;
}

/* 하단영역 */
.info {
    padding: 50px;
    text-align: center;
    color: #fff;
    /* 글자설정 한번에! */
    font: 30px "Black Ops One", cursive;
    /* 글자그림자 */
    text-shadow: 2px 2px 2px #000;
    /* 배경반투명 */
    background-color: rgba(0, 0, 0, 0.5);
}

/* 가상요소로 아이콘넣기 */
.info span::before {
    content: '';
    display: inline-block;
    vertical-align: -5px;
    width: 30px;
    height: 30px;
    border: 2px solid #ccc;
    border-radius: 50%;
    /* 배경 */
    background: pink url(../images/robot_03.png) no-repeat;
    background-position: -11px -3px;
    background-size: 60px;
}